3번 array2번 쓰면 감점임
배열 하나에 숫자 더하기
free를 2번해야한다.
1부터 10 까지 배열에 넣고, addnums 포인터를 받아서
10개짜리인데 만약 20개라면 realloc을 이용하여 20짜리 배열로 쓰기


argv[2] 쓰면감점

서버 들어가기 : ssh user2022041052@swist2.cbnu.ac.kr -p 221




1. SSH 연결
내용: 원격 서버에 SSH를 통해 연결하는 과정입니다.
과정:
ssh [ID]@[Host Name] -p [Port] 명령어를 사용하여 서버에 접속합니다.
ID는 학번이고, Host Name과 Port는 주어진 정보(swist2.cbnu.ac.kr, 221)를 사용합니다.
PuTTY와 같은 터미널 클라이언트를 사용하여 SSH 연결을 할 수도 있습니다.
과제: SSH로 서버에 연결한 후, 결과 스크린샷을 찍고 SSH에 대한 간단한 설명을 적습니다​(P02-ServerProgramming).

2. 패스워드 변경 (passwd)
내용: 서버 접속 후 패스워드를 변경하는 과정입니다.
과정:
passwd 명령어를 입력하여 현재 사용자의 비밀번호를 변경합니다.
과제: 패스워드 변경 후 결과를 스크린샷으로 찍고, 패스워드 변경 절차에 대한 간단한 설명을 적습니다​(P02-ServerProgramming).

3. echo Hello, Server!
내용: 서버에서 echo 명령어를 사용해 환경 변수 $USER와 $SHELL을 출력하는 작업입니다.
과정:
echo Hello, $USER!와 같이 명령어를 입력하여 환경 변수를 사용해 서버 상호작용을 테스트합니다.
과제: 결과를 스크린샷으로 찍고 $USER와 $SHELL 환경 변수에 대해 설명합니다​(P02-ServerProgramming).

4. vim 설정
내용: 텍스트 편집기 vim의 설정 파일 .vimrc를 작성하고 설정합니다.
과정:
.vimrc 파일을 생성하고, 기본적인 설정 (예: set cindent, set expandtab 등)을 추가합니다.
과제: .vimrc 설정 파일 내용을 보여주는 스크린샷을 첨부하고 설정에 대한 설명을 적습니다​(P02-ServerProgramming).

5. Practice01: 파일 접근 오류 출력
내용: access() 함수를 사용하여 파일 접근 권한을 확인하고 오류 코드를 출력하는 프로그램을 작성합니다.
과제: pr02_01.c 파일로 코드를 작성하고 결과를 스크린샷으로 제출합니다​(P02-ServerProgramming).

6. Practice02: 함수 호출 및 덧셈 계산
내용: addnum() 함수를 사용하여 두 숫자의 합을 구하는 프로그램을 작성합니다.
과제: pr02_02.c, subnum.c, 그리고 Makefile을 작성하고, 결과 스크린샷을 제출합니다​(P02-ServerProgramming).

7. Practice03: 동적 배열과 메모리 관리
내용: malloc()과 realloc()을 사용하여 동적으로 할당된 배열의 숫자 합을 계산하는 프로그램을 작성합니다.
과제: pr02_03.c를 작성하고, 결과 스크린샷을 제출합니다​(P02-ServerProgramming).

8. Practice04: 명령어 옵션 처리
내용: getopt() 함수를 사용하여 명령어 옵션을 처리하는 프로그램을 작성합니다.
과제: pr02_04.c를 작성하고, 결과 스크린샷을 제출합니다​(P02-ServerProgramming).

9. 최종 제출 요건
제출 마감: 2024년 9월 15일 (일) 11:59 PM까지 제출해야 하며, 지각 제출 시 점수가 깎입니다.
제출 방법:
각 실습 프로그램의 결과를 스크린샷으로 제출합니다.
소스 코드와 설명을 포함하고, 자신의 학번과 이름을 적습니다.
코드 설명은 간단하게 작성하되, 소스 코드의 기능과 흐름을 설명해야 합니다​(P02-ServerProgramming)​(P02-ServerProgramming).

#include <stdio.h>
#include <unistd.h>  // access() 함수를 위한 헤더 파일
#include <errno.h>   // errno 변수를 사용하기 위한 헤더 파일

extern int errno;    // 외부에서 선언된 errno를 사용함

int main() {
    if (access("test.txt", F_OK) == -1) {  // test.txt 파일이 존재하는지 확인
        printf("errno=%d\n", errno);  // 파일이 존재하지 않으면, errno 출력
    }
    return 0;
}


#include <stdio.h>
#include <stdlib.h>  // for atoi

// Function to subtract two numbers
int subnum(int a, int b) {
    return a - b;
}

int main(int argc, char *argv[]) {
    if (argc != 3) {
        printf("Usage: %s <num1> <num2>\n", argv[0]);
        return 1;
    }

    // Convert command-line arguments to integers
    int num1 = atoi(argv[1]);
    int num2 = atoi(argv[2]);

    // Subtract the numbers using subnum() function
    int sub = subnum(num1, num2);

    // Output the result
    printf("%d - %d = %d\n", num1, num2, sub);

    return 0;
}




#include <stdio.h>
#include <stdlib.h>  // malloc(), realloc(), free()를 위한 헤더 파일

int addnums(int *nums, int n) {
    int sum = 0;  // 합계를 저장할 변수

    for (int i = 0; i < n; ++i) {  // 배열의 모든 요소를 더함
        sum += nums[i];
    }
    return sum;  // 합계 반환
}

int main() {
    int *nums;  // 동적 배열을 가리킬 포인터
    int n;      // 배열 크기
    printf("Enter the number of elements: ");
    scanf("%d", &n);  // 사용자로부터 배열 크기 입력 받음

    nums = (int *)malloc(n * sizeof(int));  // 배열 크기만큼 동적 메모리 할당
    if (nums == NULL) {  // 메모리 할당 실패 확인
        printf("Memory allocation failed!\n");
        return 1;
    }

    printf("Enter the elements:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &nums[i]);  // 배열에 값 입력
    }

    int sum = addnums(nums, n);  // 배열의 요소 합 계산
    printf("Sum = %d\n", sum);  // 결과 출력

    free(nums);  // 동적 메모리 해제
    return 0;
}





#include <stdio.h>
#include <unistd.h>  // getopt() 함수 사용을 위한 헤더 파일

int main(int argc, char *argv[]) {
    int n;  // 옵션을 저장할 변수
    extern char *optarg;  // 옵션 인자를 저장하는 전역 변수
    extern int optind;  // 현재 처리 중인 인자의 인덱스를 저장하는 전역 변수

    printf("Current Optind: %d\n", optind);  // 초기 optind 값 출력
    while ((n = getopt(argc, argv, "abc:")) != -1) {  // "abc:" 옵션 처리
        switch (n) {
            case 'a':
                printf("Option: a\n");  // 'a' 옵션 처리
                break;
            case 'b':
                printf("Option: b\n");  // 'b' 옵션 처리
                break;
            case 'c':
                printf("Option: c, Argument=%s\n", optarg);  // 'c' 옵션과 인자 처리
                break;
            default:
                printf("Unknown option\n");
                break;
        }
    }
    printf("Next Optind: %d\n", optind);  // 최종 optind 값 출력
    return 0;
}



# Makefile

# Compiler
CC = gcc

# Compiler flags
CFLAGS = -Wall -Wextra -Werror

# Executable name
TARGET = pr02_02

# Object files
OBJS = pr02_02.o subnum.o

# Default target
all: $(TARGET)

# Linking the final executable
$(TARGET): $(OBJS)
	$(CC) $(CFLAGS) -o $(TARGET) $(OBJS)

# Compiling the pr02_02.c file
pr02_02.o: pr02_02.c
	$(CC) $(CFLAGS) -c pr02_02.c

# Compiling the subnum.c file
subnum.o: subnum.c
	$(CC) $(CFLAGS) -c subnum.c

# Clean command to remove object files and the executable
clean:
	rm -f $(OBJS) $(TARGET)

