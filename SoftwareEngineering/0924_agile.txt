p5.
agile 방법론
가능하면 빨리 정확하게 개발하는것

플랜드리븐
더 안정적으로 개발할수있는 장점이 있다.

p6.
설계 분석 구현이 엮여있다(inter leaved)
개발하여 증분한것을 수정 및 발전을 이루어져 나아감
새로운 버전을 자주 고객에게 전달되어짐
애자일의 목표 - 문서화를 최소화 하자
but 최소화된 문서화 -> 코드 수정하기(유지보수)가 힘들어진다.

p7.
플랜드리븐: 한단계 끝나면 다음단계 이렇게 진행되어진다.
개발하는 환경이 어떠하냐에 따라서 -> 애자일 플랜드리븐 각각의 장점을 살린 개발방법 선택

11.
1900년대 애자일 개발방법론 자주 개발되어짐
-코드를 잘 만드는것에 포커스를 두자
-순환적인 개발방법 채택
-빨리 진화 및 개발 하여서 사용자에게 맞는 소프트웨어 개발
-오버해드를 줄여서 빨리 변화하는것

15.
고객의 참여가 중요
요구사항에서의 우선순위는 고객이 알기 때문에 고객과의 소통을 통해 맞춤 소프트웨어 개발
소프트웨어를 복잡하게 개발하면 유지보수하기 힘들어지기 때문에 단순하게 개발하는것을 목적으로 함
프로세스가 아닌 사람에 집중한다.
if.우리팀에서 사람들마다의 장점을 살린 역할분배를 통해서 개발효율을 높인다.

18.
모든 소프트웨어 방면에서 애자일 적용하긴 힘듬
작거나 중간크기의 상품을 개발할때 유용하게 개발 가능하다.
고객이 실체 개발팀에 들어와서 유기적으로 소통이 가능한 경우
애자일 개발 방법 유용

20.
xp프로그래밍
익스트림 프로그래밍 약자
극단적으로 빨리 개발하자 라는 의미
실제로는 많이 적용되어지지 못함
xp가 개발됨으로써 애자일 방법론의 개발에 영향을 줌

-xp방법론
인터렉티브한 방법론
기능이 여러개이면 하루에도 여러번 방법론이 변경되어질 수 있다.
새로운 기능이 2주마다 개발이 되어서 고객에게 인도되어진다.
빌드를 할 때마다 모든 테스트케이스가 통과하여야한다.

21.
유저스토리 생성 - 이번버전에 포함되어야한 요구사항 상정
더작은 단위인 테스크들로 나누고 테스크별로 개발한다.
개발
스토리와 테스크가 포함되어져있는 버전을 배포
프로그램 평가
다시 처음으로 돌아와서 유저 스토리 생성
한 사이클의 기간은 2주

22.
스토리 카드를 따라 테스크로 나누어 테스크단위 개발
요구사항이라는 큰 덩어리 -> 스토리카드
그것을 작게 나눈것 -> 테스크

소규모 릴리즈
자주 조금조금씩 추가해 나가는것

23.
구현하기전 스토리가 잘 구현되었는지에대한 테스트케이스 만들고나서 개발
-> 개발하면서 테스트케이스가 맞는지 확인

리팩토링
-> 외부의 동작을 유지하면서 소프트웨어 내부적으로 코드를 개선해 나아가는것
-> 애자일 방법론 뿐만 아니라 다양하게 사용되어짐

24.
짝프로그래밍
->화면하나에 두명이 함께 코딩하는법
->xp프로그래밍은 짝 프로그래밍을 지향한다.

공동소유권
->코드를 모두가 같이 개발 및 수정이 가능하다

연속적 통합
->증분을 통해서 계속 개발이 이루어지니까 통합도 자주 이루어진다.

25.
유지할수 있는 속도 -> xp프로그래밍 추구하는 방법
너무 빠른 속도 너무 많은 야근을 추구하지 않는다.
고객의 참여를 적극적으로 권장한다.
고객이 xp프로그래밍의 풀타임으로 참여하며 고객과의 의사소통 확대

26.
xp프로그래밍과 애자일 프로그래밍과의 공통점
증분으로 개발한다는것
고객 참여적 개발
프로세스보다 사람에 집중한다.
변화를 수용해준다=시스템릴리즈를 자주해준다.
리팩토링을 자주해줌으로써 간단함을 유지한다.

27.
xp의 요소를 알아봄으로써 애자일에대해 더 알수있는 페이지임 
요소들 파악해보기

28.
유저스토리가 어떻게 쓰여지는가에?
요구사항 도출 = 유저스트리 도출
고객이 자신이 원하는 스토리들을 요구한다.
이 스토리를 통해 어떻게 개발할지 추정하고 이번 텀에 추가할 내용들을 결정


31
리팩토링
소스를 간략하게 만들어 가는것
전통적으로 소프트웨어를 변경하는데 있어서 사용되어진다.

34.
테스트 기반 방법론
테스트 만들기 - 테스트 실행해보기 - 모든테스트 통과
자동화된 테스팅 도구가 중요하다.
빌드할때마다. 자동화된 테스트 툴이 테스팅을 도와준다.

36.
고객의 참여
플랜드리븐 : 고객참여가 적다. 
xp프로그래밍 : 지속적으로 고객의 참여가 이루어짐
, 개발팀에서 하나의 일원이 되어 역할을 나아감

39.
테스트 기반 개발 방법론의 단점
테스트 케이스가 지속적으로 증분되어진다.
개발자들이 꼼수를 쓸 수 있다.
테스트로 증분하기 어려운 테스트 케이스가 있을 수 있다.
테스트 케이스가 전체 소프트웨어를 검증하기 힘든경우가 있다. -> 테스팅 자체에서 발생할수있는 문제이기도 함.


40.
짝프로그래밍 
-짝지어서 개발
공통의 오너쉽 (소유권) 이 생긴다.
각 코드 라인마다. 한사람이상의 리뷰어가 코드를 리뷰해줌
리팩토링이 권장되어짐
지식공유가 이루어짐

44.
스크럼
애자일 개발 방법론 중 하나.
소프트웨어를 빠르게 개발하는것이 목표
제시간에 계획한 예산을 써서 목표를 빠르게 달성하는것

45.
여러 페이지를 거쳐 이니셜 페이지에서는 전체적인 개요를 잡음.
사이클을 한번 도는것을 스크럼에서는 스프린트라고 한다.

46.
개발팀 7명이상에서의 팀은 적용하기 힘들다
7명미만의 팀에 적용
스크럼 : 데일리 미팅과 같은말 매일매일 미팅하는것.
지금 우리 프로젝트가 어느정도 개발되어졌는지 매일매일 확인하며 개발한다.
대면 미팅을 지향한다.

47.
스크럼 마스터
스크럼 프로세스를 관리해주는 사람
스크럼 마스터는 팀원이지 리더는 아니다.
개발팀이 개발에만 집중할수 있도록 인터페이스에 책임을 가지는 사람.

48.
잠재적 전달 가능 증가분
소프트웨어가 증분할때 한번의 사이클에서 끝낼수있는 부분
백로그
우리가 해야할것이 무었인지 알수있는 todo 리스트

49.
속도: 한번의 스프린트에서 처리할수있는 양

54.
스크럼 사이클 2-4주 정도 소요가 된다.
백로그를 통해 어떻게 해나가야할지 결정한다.

55.
외부와의 소통 -스크럼 마스터의 일
스크럼마스터 - 개발팀은 개발에만 집중하게 도와준다.

56.
스크럼 마스터 (facilitator = 조력자)
매일 미팅 정리
백로그가 어떻게 처리되는지 확인
모든 결정에대해 기록
백로그의 프로그래스가 잘 나아가는지 확인 및 의사소통

스크럼 미팅
모든정보를 팀원들과 공유
저번 미팅의 프로그래스를 알아보고

57.
스크럼 장점
가시적으로 프로그램이 진행되어지는것이 보인다.
각각의 팀들이 커뮤니케이션을 통해 정보 공유가능
고객의 피드백 즉각 반영
고객과의 신뢰가 증가한다.

58.
스크럼 프로세스를 도식화 한것

59.
분리된 상황에서 스크럼 적용하는방법.

66.
에자일 메소드
소규모 개발을 목표로함
- 커뮤니케이션이 잘 되어짐

67.
스케일 업 스케일 아웃
스케일 업 - 대규모 소프트웨어에 적용
스케일 아웃 - 대규모 조직에 적용

68.
애자일의 문제점
법적 문제 발생
계약상의 어려움 발생
유지보수하기에는 힘든점이 있음.
조직의 사이즈가 커질수록 분산되어지는 일이 다수 발생
- 애자일 방법론을 지키기 힘들 수 있다.

70.
유지보수가 쉽지 않음.
소프트웨어 개발비용보다 유지보수비용이 더큰데
문서화를 최소화 하는 애자일은 유지보수가 힘들 수 밖에 없음.
개발팀이 계속 유지보수 할 수 있는가?

71.
키포인트
문서화의 부재
개발팀이 유지가 되어지는가?

72.
상세하고 자세한 프로그램 개발 - 플랜드리븐
증분을 통한 개발 빠른 개발 - 애자일


73.
애자일은 작고 소규모의 팀을 지향하기 때문에 애자일에서
소프트웨어 팀 규모에대해 큰영향을 받는다.
조직 문화에도 큰 영향을 받는다.

73.
점진적 인도
단순성유지
-개발시간이 촉박한경우 단순성유지를 인지하기 힘들 수 있다.
-실제 물리적인 시간에 따라 어려울 수 있다.
프로세스가 아닌 사람
-애자일 : 팀원들과 소통이 중요
-> 팀 구성원들간의 의사소통 고려하는것도 중요

76.
어떤종류의 시스템인가?
시스템의 라이프 사이클이 긴가?
-만약 길다면 문서화를 통해 유지보수 용이하게함

78.
팀이클수록 애자일 하기 힘듬
시스템 상세서를 자세히 작성해야하는가?
고객과의 의사소통이 자주 이루어 질 수 있는가?
이런것들이 애자일 방법론선택에대한 고려사항

82.
큰 시스템의 애자일 : 멀티 팀 스크럼
각각의 세부팀들이 스크럼을 통해 프로젝트를 개발 
스크럼 마스터들끼리 또 스크럼을 하는 방법론















